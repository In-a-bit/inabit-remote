name: Build - Approver

on:
  push:
    branches: ['main', 'develop', 'release/**']
  pull_request:
    branches: ['*']
  workflow_dispatch:

env:
  PROJECT_ID: inabit-ci
  IMAGE: approver
  REPO: europe-west1-docker.pkg.dev/inabit-mgmt/apps-eu/approver

jobs:
  #####################################################
  # Job: Build
  #####################################################
  build:
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, 'NOBUILD')"

    steps:
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      #- name: Fetch tags for docker tagging
      #  run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      # Setup gcloud CLI
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.CI_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

      # Build the Docker image
      - name: Build docker image
        run: |-
          docker build . \
            --file ./docker/dockerfiles/Dockerfile.approver \
            --target production \
            --tag "$REPO/$IMAGE:$GITHUB_SHA" \
            --tag "$REPO/$IMAGE:${{ env.BRANCH_NAME }}" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF"

      # Push the Docker image to Google Container Registry
      - name: Publish image
        run: |-
          docker push "$REPO/$IMAGE:$GITHUB_SHA" 
          docker push "$REPO/$IMAGE:${{ env.BRANCH_NAME }}"
